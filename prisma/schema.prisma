generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DocumentType {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  guardians        Guardian[]
  providers        Provider[]
  temporaryPersons TemporaryPerson[]
  users            User[]

  @@map("document_types")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(50)
  description String     @db.VarChar(200)
  status      RoleStatus @default(Active)
  permissions Json?      @default("{}")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  users       User[]

  @@map("roles")
}

model User {
  id             Int          @id @default(autoincrement())
  firstName      String
  middleName     String?
  lastName       String
  secondLastName String?
  email          String       @unique
  passwordHash   String
  phoneNumber    String?
  address        String?
  birthDate      DateTime
  identification String       @unique
  status         UserStatus   @default(Active)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  documentTypeId Int
  roleId         Int
  athlete        Athlete?
  employee       Employee?
  documentType   DocumentType @relation(fields: [documentTypeId], references: [id])
  role           Role         @relation(fields: [roleId], references: [id])

  @@map("users")
}

model EmployeeType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]

  @@map("employee_types")
}

model Employee {
  id                  Int                  @id @default(autoincrement())
  status              EmployeeStatus       @default(Active)
  statusAssignedAt    DateTime             @default(now())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  employeeTypeId      Int
  userId              Int                  @unique
  employeePermissions EmployeePermission[]
  employeeType        EmployeeType         @relation(fields: [employeeTypeId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases           Purchase[]
  teamMembers         TeamMember[]

  @@map("employees")
}

model Permission {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  description         String?
  icon                String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  employeePermissions EmployeePermission[]
  privileges          Privilege[]

  @@map("permissions")
}

model Privilege {
  id           Int        @id @default(autoincrement())
  name         String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([name, permissionId])
  @@map("privileges")
}

model EmployeePermission {
  id           Int        @id @default(autoincrement())
  employeeId   Int
  permissionId Int
  createdAt    DateTime   @default(now())
  employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([employeeId, permissionId])
  @@map("employee_permissions")
}

model Service {
  id           Int              @id @default(autoincrement())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime
  startTime    String
  endTime      String
  location     String
  phone        String
  status       EventStatus      @default(Programado)
  imageUrl     String?
  scheduleFile String?
  publish      Boolean          @default(false)
  categoryId   Int
  typeId       Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  category     EventCategory    @relation(fields: [categoryId], references: [id])
  type         ServiceType      @relation(fields: [typeId], references: [id])
  sponsors     ServiceSponsor[]
  participants Participant[]
}

model ServiceType {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

model ServiceSponsor {
  id        Int     @id @default(autoincrement())
  serviceId Int
  sponsorId Int
  service   Service @relation(fields: [serviceId], references: [id])
  sponsor   Sponsor @relation(fields: [sponsorId], references: [id])

  @@unique([serviceId, sponsorId])
}

model Sponsor {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  description  String?
  contactEmail String?
  phone        String?
  status       SponsorStatus    @default(Active)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  services     ServiceSponsor[]
}

model SportsCategory {
  id           Int                  @id @default(autoincrement())
  nombre       String               @db.VarChar(50)
  edadMinima   Int
  edadMaxima   Int
  descripcion  String?              @db.VarChar(500)
  archivo      String?
  estado       SportsCategoryStatus @default(Activo)
  publicar     Boolean              @default(false)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  inscriptions Inscription[]
  participants Participant[]

  @@map("sports_categories")
}

model EventCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]

  @@map("event_categories")
}

model Guardian {
  id             Int          @id @default(autoincrement())
  firstName      String       @db.VarChar(100)
  lastName       String       @db.VarChar(100)
  identification String       @unique @db.VarChar(50)
  email          String       @unique @db.VarChar(150)
  phone          String       @db.VarChar(20)
  address        String?      @db.VarChar(200)
  occupation     String?      @db.VarChar(100)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  documentTypeId Int
  athletes       Athlete[]
  documentType   DocumentType @relation(fields: [documentTypeId], references: [id])

  @@map("guardians")
}

model Athlete {
  id                       Int                   @id @default(autoincrement())
  userId                   Int                   @unique
  status                   AthleteStatus         @default(Active)
  guardianId               Int?
  relationship             GuardianRelationship?
  otherRelationship        String?               @db.VarChar(100)
  currentInscriptionStatus InscriptionStatus?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  guardian                 Guardian?             @relation(fields: [guardianId], references: [id])
  user                     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  inscriptions             Inscription[]
  participants             Participant[]
  teamMembers              TeamMember[]

  @@index([status])
  @@index([guardianId])
  @@index([currentInscriptionStatus])
  @@map("athletes")
}

model Inscription {
  id                     Int                   @id @default(autoincrement())
  athleteId              Int
  sportsCategoryId       Int
  type                   InscriptionRecordType @default(initial_inscription)
  status                 InscriptionStatus     @default(Active)
  previousStatus         InscriptionStatus?
  inscriptionDate        DateTime              @default(now())
  conceptDate            DateTime              @default(now())
  expirationDate         DateTime
  concept                String                @db.VarChar(500)
  notes                  String?
  paymentProofUrl        String?               @db.VarChar(500)
  paymentProofName       String?               @db.VarChar(255)
  paymentProofType       String?               @db.VarChar(50)
  paymentProofUploadedAt DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  athlete                Athlete               @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  sportsCategory         SportsCategory        @relation(fields: [sportsCategoryId], references: [id])

  @@index([athleteId])
  @@index([sportsCategoryId])
  @@index([status])
  @@index([inscriptionDate])
  @@index([expirationDate])
  @@map("inscriptions")
}

model TemporaryPerson {
  id             Int                   @id @default(autoincrement())
  firstName      String
  lastName       String
  identification String?
  email          String?
  phone          String?
  birthDate      DateTime?
  age            Int?
  address        String?
  organization   String?
  status         TemporaryPersonStatus @default(Active)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  documentTypeId Int?
  teamMembers    TeamMember[]
  documentType   DocumentType?         @relation(fields: [documentTypeId], references: [id])

  @@map("temporary_persons")
}

model Team {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  coach        String?
  category     String?
  status       TeamStatus    @default(Active)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  participants Participant[]
  members      TeamMember[]

  @@map("teams")
}

model TeamMember {
  id                Int              @id @default(autoincrement())
  teamId            Int
  memberType        MemberType
  position          String?
  jerseyNumber      Int?
  isActive          Boolean          @default(true)
  joinedAt          DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  athleteId         Int?
  employeeId        Int?
  temporaryPersonId Int?
  athlete           Athlete?         @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  employee          Employee?        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  team              Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  temporaryPerson   TemporaryPerson? @relation(fields: [temporaryPersonId], references: [id], onDelete: Cascade)

  @@unique([teamId, jerseyNumber])
  @@map("team_members")
}

model Participant {
  id               Int             @id @default(autoincrement())
  type             ParticipantType
  registrationDate DateTime        @default(now())
  status           String          @default("Registered")
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  serviceId        Int
  sportsCategoryId Int?
  athleteId        Int?
  teamId           Int?
  athlete          Athlete?        @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  service          Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  sportsCategory   SportsCategory? @relation(fields: [sportsCategoryId], references: [id])
  team             Team?           @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("participants")
}

model Provider {
  id             Int                @id @default(autoincrement())
  entityType     ProviderEntityType @default(legal)
  businessName   String             @db.VarChar(200)
  nit            String             @unique @db.VarChar(50)
  mainContact    String             @db.VarChar(150)
  email          String             @unique @db.VarChar(150)
  phone          String             @db.VarChar(20)
  address        String             @db.VarChar(200)
  city           String             @db.VarChar(100)
  description    String?
  status         ProviderStatus     @default(Active)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  documentTypeId Int?
  documentType   DocumentType?      @relation(fields: [documentTypeId], references: [id])
  purchases      Purchase[]

  @@index([status])
  @@index([entityType])
  @@index([businessName])
  @@map("providers")
}

model Purchase {
  id             Int            @id @default(autoincrement())
  purchaseNumber String         @unique @db.VarChar(50)
  purchaseDate   DateTime       @default(now())
  deliveryDate   DateTime?
  totalAmount    Decimal        @db.Decimal(12, 2)
  status         PurchaseStatus @default(Pending)
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  providerId     Int
  employeeId     Int?
  items          PurchaseItem[]
  employee       Employee?      @relation(fields: [employeeId], references: [id])
  provider       Provider       @relation(fields: [providerId], references: [id])

  @@index([providerId])
  @@index([employeeId])
  @@index([status])
  @@index([purchaseDate])
  @@map("purchases")
}

model PurchaseItem {
  id          Int      @id @default(autoincrement())
  productName String   @db.VarChar(200)
  description String?
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  subtotal    Decimal  @db.Decimal(12, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  purchaseId  Int
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([purchaseId])
  @@map("purchase_items")
}

enum RoleStatus {
  Active
  Inactive
}

enum UserStatus {
  Active
  Inactive
  Suspended
}

enum EmployeeStatus {
  Active
  Disabled
  OnVacation
  Retired
  Deceased
}

enum EventStatus {
  Programado
  Finalizado
  Cancelado
  En_pausa
}

enum SponsorStatus {
  Active
  Inactive
}

enum SportsCategoryStatus {
  Activo
  Inactivo
}

enum AthleteStatus {
  Active
  Inactive
}

enum InscriptionStatus {
  Active
  Suspended
  Expired
}

enum InscriptionRecordType {
  initial_inscription
  renewal
  status_change
}

enum GuardianRelationship {
  Mother
  Father
  Grandparent
  Uncle_Aunt
  Sibling
  Cousin
  Legal_Guardian
  Neighbor
  Family_Friend
  Other
}

enum TemporaryPersonStatus {
  Active
  Inactive
}

enum TeamStatus {
  Active
  Inactive
  Disbanded
}

enum MemberType {
  Athlete
  Employee
  TemporaryPerson
}

enum ParticipantType {
  Individual
  Team
}

enum ProviderEntityType {
  legal
  natural
}

enum ProviderStatus {
  Active
  Inactive
}

enum PurchaseStatus {
  Pending
  Received
  Partial
  Cancelled
}
